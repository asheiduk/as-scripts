#!/bin/sh

#
# git followup <branch>...
#
# Update a local branch (not currently checked out) to the remote
# tracking branch. Will fail if the branch cannot be fast-forwarded.
#
# So it's basically the same as
#
#    git checkout $branch
#    git pull --ff-only
#    git checkout -
#
# but does not touch the worktree.
#
# AH
#

dashless="$(basename -- "$0" | sed 's/-/ /')"
OPTIONS_SPEC="\
$dashless [options] (<branch> | +<branch>)...
$dashless [--all|-a] [options]

Update a local branch (not currently checked out) to the remote
tracking branch. Will fail if the branch cannot be fast-forwarded.

So it's basically the same as

    git checkout <branch>
    git pull --ff-only
    git checkout -

but does not touch the worktree.

Using --all updates all local branches which have configured upstream
branches but branches checked out in a worktree are skipped.

To force an update of only some branches, prepend '+' to the branch name.
--
 Available options are
a,all!          update all branches with configured upstreams
d,detach	    detach worktree when branch is checked out
f,force!        force update of all branches
n,dry-run!      don't update, show commands only
"

SUBDIRECTORY_OK=true
. git-sh-setup

set_reflog_action "$dashless"

#?# require_work_tree_exists

opt_detach=
opt_dry_run=
fetch_opts=
while [ $# != 0 ]
do
    case "$1" in
        -a|--all)
	    opt_all=yes
	    ;;
	-d|--detach)
		opt_detach=yes
	    ;;
	-f|--force)
	    fetch_opts="$fetch_opts --force"
	    ;;
	-n|--dry-run)
	    fetch_opts="$fetch_opts --dry-run"
	    opt_dry_run=yes
	    ;;
	--)
	    shift
	    break
	    ;;
    esac
    shift
done


if [ -n "$opt_all" ]
then
    # either "--all" XOR branch names
    [ -z "$*" ] || usage
    set -- $(git rev-parse --symbolic --branches)
fi

fetch_refspecs=
for branch in "$@"
do
    # strip optional '+'
    force_branch=
    case "$branch" in
        +*)
	    branch=${branch#+}
	    force_branch=+
	    ;;
    esac
    
    # get upstream branch
    if upstream=$(git rev-parse --abbrev-ref "$branch@{upstream}" 2>/dev/null)
    then
        # filter HEAD of all worktrees
# git worktree list --porcelain | sed -n '/^worktree /{s///;h}; \|^branch refs/heads/master$|{g;p}'
		worktree=$(git worktree list --porcelain | sed -n '/^worktree /{s///;h}; \|^branch refs/heads/'"$branch"'$|{g;p}')
        if [ -n "$worktree" ]
        then
        	if [ -n "$opt_detach" ]
        	then
        		# TODO: detach only, if branch != upstream
        		if [ -n "$opt_dry_run" ]
        		then
	        		echo "would detach branch '$branch' in worktree '$worktree'"
        		else
        			(
        				set -x
        				git -C "$worktree" checkout --detach --quiet
        			)
           		fi
        	else
        		echo "skipping '$branch': HEAD in worktree '$worktree'"
        		continue
        	fi
        fi
        fetch_refspecs="$fetch_refspecs $force_branch$upstream:$branch"
    else
        [ -n "$opt_all" ] || die "cannot get upstream ref for $branch"
    fi
done

if [ -z "$fetch_refspecs" ]
then
    if [ -z "$opt_all" ]
    then
        usage
    else
        echo "skip fetch - found no other branches."
    fi
else
    set -x
    exec git fetch $fetch_opts . $fetch_refspecs
fi
